# -*- coding: utf-8 -*-
"""functions4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UVX1x4t3yt26IRg3-nIV9FYIlPr_ux2G
"""

def add(x,y):
  return x+y
a=10
b=20
operation=add
print(operation(a,b))

def outer_fun():
  print("first outer")
  outer_var=11
  def inner_fun():
    inner_var=22
    print("innervar",inner_var)
  inner_fun()
  print("outer",outer_var)
outer_fun()

def cube(x):
  return (x*x*x)
num=10
result=cube(num)
print("cube of",num,"=",result)

def expo(x,y):
  if y==0:
    return 1
  else:
    return(x*expo(x,y-1))
n=int(input())
m=int(input())
print("result=",expo(n,m))5

def tower(n,i,j,k):
  if n==1:
    print("from",i,"to",j)
    return
  tower(n-1,i,k,j)
  print("from",i,"to",j)
  tower(n-1,k,j,i)
n=4
tower(n,"1","2","3")

def solve(a,b):
  n,m=len(a),len(b)
  if n==0 and m==0:
    return True
  if n>1 and a[0]=='*' and m==0:
    return false
  if(n>1 and a[0]=='?') or (n!=0 and m!=0 and a[0]==b[0]):
    return solve(a[1:],b[1:])
  if n!=0 and a[0]=='*':
    return solve(a[1:],b) or solve(a,b[1:])
  return false
x=str(input("enter char"))
y=str(input("enter matching no"))
print("with wild chars:",x)
print("without wild chars:",y)
print(solve(x,y))

a=list(input("enter"))

n=int(input("enter no of ele"))
l=[],l1=[],l3=[],l4=[],l5=[]
if n==0 or n<0:
  print("invalid input")
else:
  for i in range(0,n):
    a=int(input())
    l.append(a)
if l[i]%2==0:

class bt:
    def __init__(self,data):
        self.data=data
        self.lc=None
        self.rc=None
def insert(root,newvalue):
    if root is None:
        root=bt(newvalue)
        return root
    if newvalue<root.data:
        root.lc=insert(root.lc,newvalue)
    else:
        root.rc=insert(root.rc,newvalue)
    return root
def inorder(root):
    if root==None:
        return
    inorder(root.lc)
    print(root.data)
    inorder(root.rc)
def preorder(root):
    if root==None:
        return
    print(root.data)
    preorder(root.lc)
    preorder(root.rc) 
def postorder(root):
    if root==None:
        return
    postorder(root.lc)
    postorder(root.rc)
    print(root.data)
root=insert(None,15)
insert(root,10)
insert(root,24)
insert(root,5)
insert(root,14)
insert(root,22)
insert(root,55)
print("inorder")
inorder(root)
print("preorder")
preorder(root)
print("postorder")
postorder(root)

s1=input()
s2=input()
for i in range(len(str)):